# -*- coding: utf-8 -*-
"""YogaClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1799Xd6sZbqHz72qSb2ElIdS8QUPhySjL
"""

!pip install opendatasets

import opendatasets as od

od.download('https://www.kaggle.com/datasets/niharika41298/yoga-poses-dataset')

!pip install os
!pip install tensorflow
!pip install pandas
!pip install numpy
!pip install opencv-python

import numpy as np
import pandas as pd
import cv2
import os
from sklearn.metrics import classification_report, confusion_matrix
import random
from tensorflow.keras.preprocessing import image
from tensorflow.keras.utils import to_categorical
from keras.applications.mobilenet import MobileNet, preprocess_input
from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dropout, Dense,BatchNormalization, Flatten, MaxPool2D
from keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, Callback
from keras.layers import Conv2D, Reshape
from tensorflow.keras.utils import Sequence
from keras.backend import epsilon
import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.layers import GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
import warnings
warnings.filterwarnings('ignore')

Class = os.listdir("/content/yoga-poses-dataset/DATASET/TRAIN")
Class

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

dir = '/content/yoga-poses-dataset/DATASET/TRAIN'
classlist=sorted(os.listdir(dir))
filepaths = []
labels=[]
for klass in classlist:
    classpath=os.path.join(dir, klass)
    flist=os.listdir(classpath)        
    for f in flist:
        fpath=os.path.join(classpath,f)
        filepaths.append(fpath)
        labels.append(klass)
Fseries=pd.Series(filepaths, name='filepaths')
Lseries=pd.Series(labels, name='labels')        
df=pd.concat([Fseries, Lseries], axis=1)
Fseries.head()

IMAGE_SIZE = 224
CHANNELS = 3

train_datagen = ImageDataGenerator(
        rescale = 1./255,
        horizontal_flip = True,
        rotation_range = 10
)
train_generator = train_datagen.flow_from_directory(
    '/content/yoga-poses-dataset/DATASET/TRAIN',
    target_size = (IMAGE_SIZE,IMAGE_SIZE),
    batch_size = 32,
    class_mode = 'categorical',
)

test_datagen = ImageDataGenerator(
        rescale = 1./255,
        horizontal_flip = True,
        rotation_range = 10
)
test_generator = test_datagen.flow_from_directory(
    '/content/yoga-poses-dataset/DATASET/TEST',
    target_size = (IMAGE_SIZE,IMAGE_SIZE),
    batch_size = 32,
    class_mode = 'categorical',
)

from tensorflow.keras.applications.vgg16 import VGG16

input_shape = (IMAGE_SIZE,IMAGE_SIZE,CHANNELS)
n_classes = 3
pre_trained_model = VGG16(
    input_shape = input_shape,
    include_top = False,
    weights = "imagenet"
)

for layer in pre_trained_model.layers:
    layer.trainable = False

pre_trained_model.summary()

model = tf.keras.models.Sequential([
    pre_trained_model,
    
    Flatten(),    
    Dense(256,activation="relu"),
    BatchNormalization(),
    Dropout(0.5),
    Dense(5, activation='softmax')
])

model.summary()

model.compile(
            optimizer="adam",
            loss='categorical_crossentropy',
            metrics = ['acc']
)

!pip install pillow

from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True

history = model.fit_generator(
            train_generator,
            validation_data=test_generator,
            epochs=8
)

"""**Training and Validation loss and Accuracy**"""

import matplotlib.pyplot as plt

acc      = history.history['acc']
val_acc  = history.history['val_acc']
loss     = history.history['loss']
val_loss = history.history['val_loss']

epochs   = range(len(acc))


# Plot training and validation accuracy per epoch
plt.plot(epochs,acc)
plt.plot(epochs,val_acc)
plt.title('Training and validation accuracy')
plt.legend(['train','val'])
plt.figure()

# Plot training and validation loss per epoch
plt.plot(epochs,loss)
plt.plot(epochs,val_loss)
plt.legend(['train','val'])
plt.title('Training and validation loss')

train_loss, train_acc = model.evaluate(train_generator)
test_loss, test_acc   = model.evaluate(test_generator)
print("final train accuracy = {:.2f} , Test accuracy = {:.2f}".format(train_acc*100, test_acc*100))